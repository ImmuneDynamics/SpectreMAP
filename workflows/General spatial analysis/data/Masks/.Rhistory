C <- fsom$metaclustering[fsom$FlowSOM$map$mapping[,1]]
if(nrow(A) != length(B)){
stop("Error - the numer of rows (cells) is different in the data, clusters, and/or metaclusters")
}
if(nrow(A) != length(C)){
stop("Error - the numer of rows (cells) is different in the data, clusters, and/or metaclusters")
}
if(length(B) != length(C)){
stop("Error - the numer of rows (cells) is different in the data, clusters, and/or metaclusters")
}
# nrow(A)
# length(B)
# length(C)
### Merge
fsom.dt <- as.data.table(A)
fsom.dt <- cbind(A, prep.fsom.cluster = B, prep.fsom.metacluster = C)
fsom.dt <- as.data.table(fsom.dt)
# str(fsom.dt)
### Results
setwd(starting.dir)
unlink("tmp-cytonorm-fsom", recursive = TRUE)
files <- gsub(".fcs", "", files)
fsom$files <- files
fsom$filenums <- unique(fsom.dt$File)
fsom$batches <- batches
fsom$features <- use.cols
res <- named.list(fsom, fsom.dt)
message("Step 4/4 - FlowSOM complete")
res
library(devtools)
library(roxygen2)
setwd("/Users/thomasa/Google Drive File Stream/My Drive/_Sydney Cytometry/Libraries (synced)/GitHub/Public github/SpectreMAP/")
document()
###################################################################################
### Load packages and set directories
###################################################################################
### Load packages
library(Spectre)
library(SpectreMAP)
package.check()
package.load()
library('tiff') # for reading tiffs
library('raster') # managing images as rasters
library('rgeos') # spatial functions
library('tidyr') # to use the 'gather' function
library('sp') # spatial functions (in particular, for fast creation of polygons)
library('sf') # spatial functions (in particular, for fast creation of polygons)
library('stars') # spatial functions (in particular, for fast creation of polygons)
library('velox') # fast creation of 'single cell' data
### Set PrimaryDirectory
dirname(rstudioapi::getActiveDocumentContext()$path)            # Finds the directory where this script is located
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))     # Sets the working directory to where the script is located
getwd()
PrimaryDirectory <- getwd()
PrimaryDirectory
### Create output directory
setwd(PrimaryDirectory)
dir.create("Output - SpectreMAP demo")
setwd("Output - SpectreMAP demo")
OutputDirectory <- getwd()
###################################################################################
### Read in TIFF channel images
###################################################################################
### Read TIFF files into spatial.dat object
setwd(PrimaryDirectory)
setwd("ROIs/")
rois <- list.dirs(getwd(), full.names = FALSE, recursive = FALSE)
as.matrix(rois)
spatial.dat <- SpectreMAP::read.spatial.files(roi.loc = getwd(), rois = rois)
### Check the spatial data object
as.matrix(names(spatial.dat)) # ROI names
str(spatial.dat, 3) # shows the structure
as.matrix(names(spatial.dat[[1]]$RASTERS)) # TIFF names of first ROI
###################################################################################
### Read in masks
###################################################################################
### Setup to read masks
setwd(PrimaryDirectory)
setwd("Masks")
list.files()
mask.ext <- "_ilastik_s2_Probabilities_mask.tiff"
masks <- list.files(pattern = mask.ext)
masks
### Read in masks and add to spatial.dat
spatial.dat <- do.add.masks(spatial.dat = spatial.dat,
mask.loc = getwd(),
masks = masks,
mask.ext = mask.ext,
mask.label = "cell_mask")
### Review
str(spatial.dat, 3) # shows the structure
###################################################################################
### Create mask outlines/polygons and calculate cellular data
###################################################################################
### Review mask names
names(spatial.dat[[1]]$MASKS)
### Calculate polygons and outlines for each mask object
spatial.dat <- do.create.outlines(spatial.dat = spatial.dat,
mask.name = "cell_mask")
str(spatial.dat, 3)
str(spatial.dat[[1]]$MASKS$cell_mask, 1)
###################################################################################
### Extract 'cellular' data using masks
###################################################################################
### Calculate cellular data
spatial.dat <- do.extract(dat = spatial.dat, mask = "cell_mask", name = "CellData", fun = "mean")
str(spatial.dat, 3)
spatial.dat[[1]]$DATA
###################################################################################
### Make some spatial plots
###################################################################################
### Review ROI names
setwd(OutputDirectory)
dir.create("Spatial plots")
setwd("Spatial plots")
as.matrix(names(spatial.dat))
### Review channel names
as.matrix(names(spatial.dat[[1]]$RASTERS))
### Plots
make.spatial.plot(spatial.dat = spatial.dat,
image.roi = '20171228_spleen315_500x500_editedforFAS_s1_p9_r2_a2_ac',
image.channel = "CD20_Dy161")
make.spatial.plot(spatial.dat = spatial.dat,
image.roi = '20171228_spleen315_500x500_editedforFAS_s1_p9_r2_a2_ac',
image.channel = "CD20_Dy161",
mask.outlines = "cell_mask")
make.spatial.plot(spatial.dat = spatial.dat,
image.roi = '20171228_spleen315_500x500_editedforFAS_s1_p9_r2_a2_ac',
image.channel = "CD20_Dy161",
mask.outlines = "cell_mask",
cell.dat = "CellData",
cell.col = "CD20_Dy161")
###################################################################################
### Pull and merge cell data from each ROI
###################################################################################
### Pull cell data from each ROI and merge
setwd(OutputDirectory)
dir.create("Cellular plots")
setwd("Cellular plots")
cell.dat <- do.pull.data(spatial.dat = spatial.dat,
target.dat = "CellData")
cell.dat
### Define cellular and clustering columns
as.matrix(names(cell.dat))
cellular.cols <- names(cell.dat)[c(17:29)]
as.matrix(names(cell.dat))
clustering.cols <- names(cell.dat)[c(18:24,29)]
### Arcsinh
cell.dat <- do.asinh(cell.dat, cellular.cols, cofactor = 1)
cellular.cols <- paste0(cellular.cols, "_asinh")
clustering.cols <- paste0(clustering.cols, "_asinh")
### Clustering and DR
cell.dat <- run.flowsom(cell.dat, clustering.cols, meta.k = 10)
cell.dat <- run.umap(cell.dat, clustering.cols)
### Make some data plots
make.colour.plot(cell.dat, "UMAP_X", "UMAP_Y", col.axis = "FlowSOM_metacluster", col.type = 'factor', add.label = TRUE)
make.multi.plot(cell.dat, "UMAP_X", "UMAP_Y", cellular.cols)
### Make some spatial plots
make.spatial.plot(spatial.dat = spatial.dat,
image.roi = '20171228_spleen315_500x500_editedforFAS_s1_p9_r2_a2_ac',
image.channel = "CD20_Dy161",
mask.outlines = "cell_mask",
cell.dat = cell.dat[cell.dat[["ROI"]] == '20171228_spleen315_500x500_editedforFAS_s1_p9_r2_a2_ac',],
cell.col = "CD20_Dy161")
make.spatial.plot(spatial.dat = spatial.dat,
image.roi = '20171228_spleen315_500x500_editedforFAS_s1_p9_r2_a2_ac',
image.channel = "CD20_Dy161",
mask.outlines = "cell_mask",
cell.dat = cell.dat[cell.dat[["ROI"]] == '20171228_spleen315_500x500_editedforFAS_s1_p9_r2_a2_ac',],
cell.col = "FlowSOM_metacluster",
cell.col.type = 'factor')
###################################################################################
### Expression heatmap
###################################################################################
exp <- do.aggregate(dat = cell.dat, use.cols = cellular.cols, by = 'FlowSOM_metacluster', func = 'mean')
make.pheatmap(dat = exp, sample.col = 'FlowSOM_metacluster', plot.cols = cellular.cols)
###################################################################################
### Save CSV and FCS files
###################################################################################
### Set directory
setwd(OutputDirectory)
dir.create("Data")
setwd("Data")
### Create a flipped y-axis
all.neg <- function(test) -1*abs(test)
y_invert <- cell.dat[['y']]
y_invert <- all.neg(y_invert)
cell.dat[['y_invert']] <- y_invert
cell.dat
### Save CSV and FCS files
write.files(cell.dat, "Sp_AllData", write.csv = TRUE, write.fcs = TRUE)
write.files(cell.dat, "Sp", divide.by = "ROI", write.csv = TRUE, write.fcs = TRUE)
### Save RDS file
saveRDS(spatial.dat, 'spatial.data.rds')
remove.packages("SpectreMAP")
## Install devtools (if not already installed)
if(!require('devtools')) {install.packages('devtools')}
### Install Spectre and SpectreMAP
library('devtools')
install_github("tomashhurst/SpectreMAP")
library(SpectreMAP)
### Load packages
library(Spectre)
library(SpectreMAP)
package.check()
package.load()
library('tiff') # for reading tiffs
library('raster') # managing images as rasters
library('rgeos') # spatial functions
library('tidyr') # to use the 'gather' function
library('sp') # spatial functions (in particular, for fast creation of polygons)
library('sf') # spatial functions (in particular, for fast creation of polygons)
library('stars') # spatial functions (in particular, for fast creation of polygons)
library('velox') # fast creation of 'single cell' data
### Set PrimaryDirectory
dirname(rstudioapi::getActiveDocumentContext()$path)            # Finds the directory where this script is located
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))     # Sets the working directory to where the script is located
getwd()
PrimaryDirectory <- getwd()
PrimaryDirectory
### Create output directory
setwd(PrimaryDirectory)
dir.create("Output - SpectreMAP demo")
setwd("Output - SpectreMAP demo")
OutputDirectory <- getwd()
setwd(PrimaryDirectory)
setwd("ROIs/")
rois <- list.dirs(getwd(), full.names = FALSE, recursive = FALSE)
as.matrix(rois)
spatial.dat <- SpectreMAP::read.spatial.files(roi.loc = getwd(), rois = rois)
as.matrix(names(spatial.dat)) # ROI names
str(spatial.dat, 3) # shows the structure
as.matrix(names(spatial.dat[[1]]$RASTERS)) # TIFF names of first ROI
setwd(PrimaryDirectory)
setwd("Masks")
list.files()
mask.ext <- "_ilastik_s2_Probabilities_mask.tiff"
masks <- list.files(pattern = mask.ext)
masks
spatial.dat <- do.add.masks(spatial.dat = spatial.dat,
mask.loc = getwd(),
masks = masks,
mask.ext = mask.ext,
mask.label = "cell_mask")
str(spatial.dat, 3) # shows the structure
### Review mask names
names(spatial.dat[[1]]$MASKS)
### Calculate polygons and outlines for each mask object
spatial.dat <- do.create.outlines(spatial.dat = spatial.dat,
mask.name = "cell_mask")
str(spatial.dat, 3)
spatial.dat[[1]]$DATA
setwd(OutputDirectory)
dir.create("Spatial plots")
setwd("Spatial plots")
as.matrix(names(spatial.dat))
as.matrix(names(spatial.dat[[1]]$RASTERS))
make.spatial.plot(spatial.dat = spatial.dat,
image.roi = '20171228_spleen315_500x500_editedforFAS_s1_p9_r2_a2_ac',
image.channel = "CD20_Dy161")
make.spatial.plot(spatial.dat = spatial.dat,
image.roi = '20171228_spleen315_500x500_editedforFAS_s1_p9_r2_a2_ac',
image.channel = "CD20_Dy161",
mask.outlines = "cell_mask")
make.spatial.plot(spatial.dat = spatial.dat,
image.roi = '20171228_spleen315_500x500_editedforFAS_s1_p9_r2_a2_ac',
image.channel = "CD20_Dy161",
mask.outlines = "cell_mask",
cell.dat = "CellData",
cell.col = "CD20_Dy161")
###################################################################################
### Pull and merge cell data from each ROI
###################################################################################
### Pull cell data from each ROI and merge
setwd(OutputDirectory)
dir.create("Cellular plots")
setwd("Cellular plots")
cell.dat <- do.pull.data(spatial.dat = spatial.dat,
target.dat = "CellData")
cell.dat
spatial.dat
make.spatial.plot(spatial.dat = spatial.dat,
image.roi = '20171228_spleen315_500x500_editedforFAS_s1_p9_r2_a2_ac',
image.channel = "CD20_Dy161")
make.spatial.plot(spatial.dat = spatial.dat,
image.roi = '20171228_spleen315_500x500_editedforFAS_s1_p9_r2_a2_ac',
image.channel = "CD20_Dy161",
mask.outlines = "cell_mask")
make.spatial.plot(spatial.dat = spatial.dat,
image.roi = '20171228_spleen315_500x500_editedforFAS_s1_p9_r2_a2_ac',
image.channel = "CD20_Dy161",
mask.outlines = "cell_mask",
cell.dat = "CellData",
cell.col = "CD20_Dy161")
spatial.dat
str(spatial.dat, 3)
spatial.dat <- do.extract(dat = spatial.dat, mask = "cell_mask", name = "CellData", fun = "mean")
###################################################################################
### Load packages and set directories
###################################################################################
### Load packages
library(Spectre)
library(SpectreMAP)
package.check()
package.load()
library('tiff') # for reading tiffs
library('raster') # managing images as rasters
library('rgeos') # spatial functions
library('tidyr') # to use the 'gather' function
library('sp') # spatial functions (in particular, for fast creation of polygons)
library('sf') # spatial functions (in particular, for fast creation of polygons)
library('stars') # spatial functions (in particular, for fast creation of polygons)
library('velox') # fast creation of 'single cell' data
### Set PrimaryDirectory
dirname(rstudioapi::getActiveDocumentContext()$path)            # Finds the directory where this script is located
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))     # Sets the working directory to where the script is located
getwd()
PrimaryDirectory <- getwd()
PrimaryDirectory
### Create output directory
setwd(PrimaryDirectory)
dir.create("Output - SpectreMAP demo")
setwd("Output - SpectreMAP demo")
OutputDirectory <- getwd()
###################################################################################
### Read in TIFF channel images
###################################################################################
### Read TIFF files into spatial.dat object
setwd(PrimaryDirectory)
setwd("ROIs/")
rois <- list.dirs(getwd(), full.names = FALSE, recursive = FALSE)
as.matrix(rois)
spatial.dat <- SpectreMAP::read.spatial.files(roi.loc = getwd(), rois = rois)
### Check the spatial data object
as.matrix(names(spatial.dat)) # ROI names
str(spatial.dat, 3) # shows the structure
as.matrix(names(spatial.dat[[1]]$RASTERS)) # TIFF names of first ROI
###################################################################################
### Read in masks
###################################################################################
### Setup to read masks
setwd(PrimaryDirectory)
setwd("Masks")
list.files()
mask.ext <- "_ilastik_s2_Probabilities_mask.tiff"
masks <- list.files(pattern = mask.ext)
masks
### Read in masks and add to spatial.dat
spatial.dat <- do.add.masks(spatial.dat = spatial.dat,
mask.loc = getwd(),
masks = masks,
mask.ext = mask.ext,
mask.label = "cell_mask")
### Review
str(spatial.dat, 3) # shows the structure
### Review mask names
names(spatial.dat[[1]]$MASKS)
### Calculate polygons and outlines for each mask object
spatial.dat <- do.create.outlines(spatial.dat = spatial.dat,
mask.name = "cell_mask")
str(spatial.dat, 3)
str(spatial.dat[[1]]$MASKS$cell_mask, 1)
spatial.dat <- do.extract(dat = spatial.dat, mask = "cell_mask", name = "CellData", fun = "mean")
dat = spatial.dat
mask = "cell_mask"
name = "CellData"
fun = "mean"
require(rgeos)
require(sp)
require(rgdal)
require('velox')
require(data.table)
rois <- names(spatial.dat)
roi <- rois[[1]]
# roi <- rois[[1]]
message(paste0("Processing ", roi))
roi.stack <- spatial.dat[[roi]]$RASTERS
roi.poly <- spatial.dat[[roi]]$MASKS[[mask]]$polygons
raster.names <- names(roi.stack)
ply.df <- as.data.frame(roi.poly)
ply.df
ply.centroids <- gCentroid(roi.poly,byid=TRUE)
ply.centroids.df <- as.data.frame(ply.centroids)
ply.centroids.df # mask number, with X and Y coordinates
i <- raster.names[[1]]
# i <- raster.names[[1]]
message(paste0("... ", i))
temp.dat <- roi.stack[[i]]
## FAST method
## Faster options
vx <- velox(temp.dat)
res <- vx$extract(sp=roi.poly, fun=mean) # 3293 polygons #3294?
res <- as.data.table(res)
names(res) <- i
ply.centroids.df <- cbind(ply.centroids.df, res) ## doing this would remove the necessity to calculate centroids within the 'make.spatial.plot' function
for(i in raster.names){
# i <- raster.names[[1]]
message(paste0("... ", i))
temp.dat <- roi.stack[[i]]
## Slower method
# extracted.dat <- raster::extract(x = temp.dat, y = roi.poly, df = TRUE) # this is the time consuming step
# extracted.dat.res <- aggregate(. ~ID, data = extracted.dat, FUN = fun)
# # #colnames(extracted.dat.res)[2] <- i # should we be removing .tiff here? If we do should be the same in the other read.spatial function, to ensure matching consistency
#
# ply.centroids.df <- cbind(ply.centroids.df, extracted.dat.res[2]) ## doing this would remove the necessity to calculate centroids within the 'make.spatial.plot' function
## FAST method
## Faster options
vx <- velox(temp.dat)
res <- vx$extract(sp=roi.poly, fun=mean) # 3293 polygons #3294?
res <- as.data.table(res)
names(res) <- i
ply.centroids.df <- cbind(ply.centroids.df, res) ## doing this would remove the necessity to calculate centroids within the 'make.spatial.plot' function
}
roi.dat
ID <- c(1:nrow(ply.centroids.df))
roi.dat <- cbind(ID, ply.centroids.df)
roi.dat <- as.data.table(roi.dat)
roi.dat
other.polys <- names(spatial.dat[[roi]]$MASKS)
other.polys <- other.polys[!other.polys %in% mask]
cols <- c("x", "y", "ID")
roi.dat.xyid <- roi.dat[,..cols]
names(roi.dat.xyid) <- c('Longitude', 'Latitude', 'Names')
roi.dat.xyid
#' do.extract
#'
#' @import data.table
#'
#' @export
do.extract <- function(dat, # spatial.data object
mask, # name of the mask being summarised
name = "CellData",
fun = "mean" # type of marker summarisation (mean, median etc)
){
#message("This is a developmental Spectre-spatial function that is still in testing phase with limited documentation. We recommend only using this function if you know what you are doing.")
require(rgeos)
require(sp)
require(rgdal)
require('velox')
require(data.table)
### Demo data
# dat <- spatial.dat
# mask <- "cell_mask"
# name = "CellData"
# fun = "mean"
#
# str(dat, 4)
### Loop for each ROI
rois <- names(spatial.dat)
for(roi in rois){
# roi <- rois[[1]]
message(paste0("Processing ", roi))
roi.stack <- spatial.dat[[roi]]$RASTERS
roi.poly <- spatial.dat[[roi]]$MASKS[[mask]]$polygons
raster.names <- names(roi.stack)
ply.df <- as.data.frame(roi.poly)
ply.df
ply.centroids <- gCentroid(roi.poly,byid=TRUE)
ply.centroids.df <- as.data.frame(ply.centroids)
ply.centroids.df # mask number, with X and Y coordinates
## RASTERS
for(i in raster.names){
# i <- raster.names[[1]]
message(paste0("... ", i))
temp.dat <- roi.stack[[i]]
## Slower method
# extracted.dat <- raster::extract(x = temp.dat, y = roi.poly, df = TRUE) # this is the time consuming step
# extracted.dat.res <- aggregate(. ~ID, data = extracted.dat, FUN = fun)
# # #colnames(extracted.dat.res)[2] <- i # should we be removing .tiff here? If we do should be the same in the other read.spatial function, to ensure matching consistency
#
# ply.centroids.df <- cbind(ply.centroids.df, extracted.dat.res[2]) ## doing this would remove the necessity to calculate centroids within the 'make.spatial.plot' function
## FAST method
## Faster options
vx <- velox(temp.dat)
res <- vx$extract(sp=roi.poly, fun=mean) # 3293 polygons #3294?
res <- as.data.table(res)
names(res) <- i
ply.centroids.df <- cbind(ply.centroids.df, res) ## doing this would remove the necessity to calculate centroids within the 'make.spatial.plot' function
}
ID <- c(1:nrow(ply.centroids.df))
roi.dat <- cbind(ID, ply.centroids.df)
roi.dat <- as.data.table(roi.dat)
## OTHER MASK POLYGONS
other.polys <- names(spatial.dat[[roi]]$MASKS)
other.polys <- other.polys[!other.polys %in% mask]
cols <- c("x", "y", "ID")
roi.dat.xyid <- roi.dat[,..cols]
names(roi.dat.xyid) <- c('Longitude', 'Latitude', 'Names')
roi.dat.xyid
Longitude <- roi.dat.xyid$Longitude
Latitude <- roi.dat.xyid$Latitude
coordinates(roi.dat.xyid) <- ~ Longitude + Latitude
if(length(other.polys) != 0){
for(i in c(1:(length(other.polys)))){
# i <- 1
ply.name <- other.polys[[i]]
message(paste0("... occurance in ", ply.name))
ply <- spatial.dat[[roi]]$MASKS[[ply.name]]$polygons
proj4string(roi.dat.xyid) <- proj4string(ply)
over.res <- over(roi.dat.xyid, ply)
over.res <- as.data.table(over.res)
roi.dat <- cbind(roi.dat, over.res)
}
}
spatial.dat[[roi]]$DATA[[name]] <- roi.dat
}
### Return new spatial.dat object
return(spatial.dat)
}
spatial.dat <- do.extract(dat = spatial.dat, mask = "cell_mask", name = "CellData", fun = "mean")
rm(do.extract)
spatial.dat <- do.extract(dat = spatial.dat, mask = "cell_mask", name = "CellData", fun = "mean")
